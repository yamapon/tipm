{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# tipm\r\n\r\n  Titanium package manager.\r\n\r\n## Installation\r\n\r\n     $ npm install -g tipm\r\n\r\n## Installing packages\r\n\r\n  To install one or more packages, simply pass their github\r\n  repo names as arguments to `tipm install`. Dependencies\r\n  are resolved and the tipm module contents are downloaded into your\r\n  apps `module/commonjs/` directory by default. View `tipm help install` for details.\r\n\r\n```\r\n$ tipm install tipm/superagent\r\n\r\n   install : tipm/superagent@master\r\n       dep : tipm/events@0.1.0\r\n   install : tipm/events@0.1.0\r\n     fetch : tipm/monglo:tipm-monglo.js\r\n     fetch : tipm/monglo:fs-store.js\r\n     fetch : tipm/events:tipm-events.js\r\n  complete : tipm/superagent\r\n  complete : tipm/events\r\n```\r\n\r\n## Searching for module\r\n\r\n  By adding your tipm module to the [TIPM List](https://github.com/tipm/tipm/wiki/Modules) wiki page it will become automatically available to `tipm-search(1)`. When invoked with no query all tipm modules are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\r\n\r\n```\r\n$ tipm search ui\r\n\r\n  tipm/dialog\r\n  url: https://github.com/tipm/dialog\r\n  desc: Dialog module\r\n  ★ 12\r\n\r\n  tipm/notification\r\n  url: https://github.com/tipm/notification\r\n  desc: Notification module\r\n  ★ 10\r\n\r\n  tipm/overlay\r\n  url: https://github.com/tipm/overlay\r\n  desc: Overlay module\r\n  ★ 7\r\n\r\n```\r\n\r\n## Usage\r\n\r\n Via `--help`:\r\n\r\n```\r\n\r\nUsage: tipm <command> [options]\r\n\r\nOptions:\r\n\r\n  -h, --help     output usage information\r\n  -V, --version  output the version number\r\n\r\nCommands:\r\n\r\n  install <name ...>      install one or more tipm modules\r\n  create <dir>            create a module skeleton\r\n  search [query]          search with the given query\r\n  info <name> [prop]      output json module information\r\n  changes <name>          output changelog contents\r\n  docs <name>             output readme contents\r\n  open <name>             open module github repo\r\n  build                   build the module\r\n  ls                      list installed tipm modules\r\n\r\n```\r\n\r\n## Features\r\n\r\n  - write modular commonjs modules\r\n  - write modules that include their own styles, images, scripts, or any combo\r\n  - no registry publishing or account required, uses github repositories\r\n  - extensible sub-commands via `tipm-YOURCOMMAND` git-style\r\n  - module skeleton creation command\r\n  - installs dependencies from the command-line or ./package.json\r\n  - avoid name squatting through github's naming conventions\r\n  - build your module with `--standalone` to share them with non-tipm(1) users\r\n  - view documentation from the command line\r\n  - simple private registry set up (all you need is a file server)\r\n  - very fast\r\n\r\n## Using Github as a registry\r\n\r\n  By using GitHub as the registry, `tipm(1)` is automatically\r\n  available to you without further explicit knowledge or work\r\n  creating a registry account etc.\r\n\r\n  A nice side-effect of this namespaced world is that dependencies\r\n  are explicit and self-documenting. No longer do you need to query\r\n  the registry for a \"repo\" property that may not exist, it's simply\r\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\r\n  than the unclear \"page\".\r\n\r\n  Another benefit of this is that there are zero name collisions, for example\r\n  you may use \"tipm/tip\" for a dependency of \"foo\", and \"someuser/tip\"\r\n  as a dependency of \"bar\", providing namespaced module names. This prevents\r\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\r\n  \"progress-module\" found in npm.\r\n\r\n## Creating a tipm Module\r\n\r\n  The `tipm-create(1)` command can create a module\r\n  project skeleton for you by filling out the prompts. Once\r\n  this repo is published to Github, you're all done! Note\r\n  when publishing only publish the files inside the modules version\r\n  folder. ex. ./tipm-superagent/0.9.6/\r\n\r\n```\r\n$ tipm create tester\r\nrepo (username/project): tipm/tester\r\ndescription: Some example module\r\nversion:(0.0.1) 0.1.0\r\nauthor name: Christian Sullivan\r\nlicense type:(MIT) MIT\r\nminimum Ti SDK version: 2.1.0\r\n\r\n      create : tester/0.1.0\r\n      create : tester/0.1.0/index.js\r\n      create : tester/0.1.0/Readme.md\r\n      create : tester/0.1.0/.gitignore\r\n      create : tester/0.1.0/package.json\r\n\r\n```\r\n\r\n\r\n## Manifest\r\n\r\n  The Titanium commonjs manifest file is automatically generated by `tipm(1)`\r\n  when installing the module. So there is no need to publish this to your git\r\n  repo or manually create. If you wish to create your own just include `manifest`\r\n  in the files array of your `package.json` and it will override the generated manifest\r\n\r\n## Developing tipm(1) sub-commands\r\n\r\n  `tipm(1)` and sub-commands are structured much like `git(1)`,\r\n  in that sub-commands are simply separate executables. For example\r\n  `$ tipm info pkg` and `$ tipm-info pkg` are equivalent.\r\n\r\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\r\n  profile or session while developing tipm, otherwise `./bin/tipm`\r\n  will have a hard time finding the sub-commands.\r\n\r\n## Running tests\r\n\r\nMake sure dependencies are installed:\r\n\r\n```\r\n$ npm install\r\n```\r\n\r\nThen run:\r\n\r\n```\r\n$ make test\r\n```\r\n\r\n# TODO\r\n  - Compile native modules\r\n  - Integrate view templates (ax-view)\r\n  - Integrate stylesheet templates (ax-style)\r\n\r\n## Shout-outs\r\n\r\n  The concept of tipm themselves are nothing new, Drupal\r\n  for example has been doing this for years, however it seemed the concept was never\r\n  really translated to the client. My hope is that other communities will re-implement this\r\n  simple tool in their language of choice so that we can all consume components\r\n  easily.\r\n\r\n## Credits\r\n\r\ntipm is based on port of [TJ Holowaychuk](https://github.com/visionmedia) [Component](https://github.com/component/component) for titanium apps\r\n\r\n\r\n## Components Contributors\r\n\r\n  - TJ Holowaychuk\r\n  - Guillermo Rauch\r\n  - Garrett Johnson\r\n  - Amir Abu Shareb\r\n  - Adam Sanderson\r\n  - Matt Mueller\r\n  - Forbes Lindesay\r\n  - Arpad Borsos\r\n  - Dan Williams\r\n\r\n## License\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2012 Christian Sullivan &lt;cs@euforic.co&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","google":"","name":"Tipm","tagline":"Titanium Package Manager"}