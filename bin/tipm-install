#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander')
  , component = require('..')
  , fs = require('fs')
  , exists = fs.existsSync
  , utils = component.utils
  , log = utils.log
  , url = require('url')
  , path = require('path')
  , conf = {};

// options

program
  .usage('[pkg ...]')
  .option('-d, --dev', 'install development dependencies')
  .option('-o, --out <dir>', 'output tipm module to the given <dir>')
  .option('-f, --force', 'force installation even if previously installed')
  .option('-s, --save', 'save the installed dep(s) to ./package.json');

// examples

program.on('--help', function(){
  console.log('  Examples:');
  console.log();
  console.log('    # install deps in ./package.json');
  console.log('    $ tipm install');
  console.log();
  console.log('    # install a single tipm module');
  console.log('    $ tipm install tipm/monglo');
  console.log();
  console.log('    # install several tipm modules');
  console.log('    $ tipm install tipm/monglo tipm/events');
  console.log();
  console.log('    # shell brace expansion ftw');
  console.log('    $ tipm install tipm/{monglo,events,apic}');
  console.log();
  console.log('    # install a specific tag / sha');
  console.log('    $ tipm install tipm/apic@8bf1ffc3f');
  console.log();
  console.log('    # install regular & development deps in .');
  console.log('    $ tipm install -d');
  console.log();
});

// parse argv

program.parse(process.argv);

// pkgs

var pkgs = program.args;

// install from ./package.json

if (!pkgs.length) {
  var conf = config();

  if (conf.dependencies) {
    pkgs = normalize(conf.dependencies);
  }

  if (conf.development && program.dev) {
    pkgs = pkgs.concat(normalize(conf.development));
  }
}

// --save

if (program.save) {
  var fs = require('fs');
  var conf = config();
  conf.dependencies = conf.dependencies || {};
  pkgs.forEach(function(pkg){
    conf.dependencies[pkg] = '*';
  });
  fs.writeFile('package.json', JSON.stringify(conf, null, 2));
}

// implicit remotes

conf = exists('package.json')
  ? config()
  : {};

conf.remotes = conf.remotes || [];
conf.remotes.push('https://raw.github.com');

// install

console.log();
pkgs.forEach(function(pkg){
  var parts = pkg.split('@');
  var name = parts.shift();
  var version = parts.shift() || 'master';
  install(name, version);
});

// map deps to args

function normalize(deps) {
  return Object.keys(deps).map(function(name){
    return name + '@' + deps[name];
  });
}

// reporter

function report(pkg, options) {
  options = options || {};
  log('install', pkg.name + '@' + pkg.version);

  pkg.on('error', function(err){
    if (404 != err.status) {
      log('error', err.message);
      log('error', 'got ' + err.status + ' response');
      process.exit(1);
    }

    if (false !== options.error) {
      log('error', err.message);
      process.exit(1);
    }
  });

  pkg.on('dep', function(dep){
    log('dep', dep.name + '@' + dep.version);
    report(dep);
  });

  pkg.on('exists', function(dep){
    log('exists', dep.name + '@' + dep.version);
  });

  pkg.on('file', function(file){
    log('fetch', pkg.name + ':' + file);
  });

  pkg.on('end', function(){
    log('complete', pkg.name);
  });
}

// padding

process.on('exit', function(){
  console.log();
});

/**
 * Install package `name` at the given `version`
 * from all specified remotes.
 *
 * @param {String} name
 * @param {String} version
 * @api private
 */

function install(name, version) {
  var i = 0;

  next();

  function next() {
    var remote = conf.remotes[i++];
    if (!remote) return;

    var last = 0 == conf.remotes.length;
    remote = url.parse(remote);
    remote.href = remote.href.slice(0, -1);

    var pkg = component.install(name, version, {
      dest: program.out,
      force: program.force,
      dev: program.dev,
      remote: remote.href
    });

    pkg.once('error', next);
    report(pkg, { error: last });

    // TODO: add callback
    pkg.install();
  }
}

/**
 * Load configuration json.
 *
 * @return {Object}
 * @api private
 */

function config() {
  return require(path.resolve('package.json'));
}