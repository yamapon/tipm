#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander')
  , component = require('..')
  , utils = component.utils
  , path = require('path')
  , fs = require('fs')
  , join = path.join
  , read = fs.readFileSync
  , mkdir = require('mkdirp').sync
  , readme = require('../templates/readme');

// usage

program.usage('<dir>');

// parse

program.parse(process.argv);

// config

var conf = {};

// dest

var dir = program.args[0];

// require destination

if (!dir) utils.fatal('<dir> required');

/**
 * Verbose write.
 */

function write(path, str) {
  utils.log('create', path);
  fs.writeFileSync(path, str);
}

// prompt

program.prompt({
  repo    : 'repo (username/project): ',
  desc    : 'description: ',
  version : 'version (0.0.1): ',
  author  : 'author name: ',
  license : 'license type (MIT): ',
  minsdk  : 'minimum Ti SDK version (2.0.0): ',
  guid    : 'Ti guid (xxxxxxx-xxxxxx-xxxxxx): '
}, function(obj){
  // repo
  var repo = obj.repo.split('/');
  if (2 != repo.length) throw new Error('repo must be <username>/<project>');

  // name
  var name = repo[1];

  // populate json
  conf.name = name;
  conf.repo = repo.join('/');
  conf.version = obj.version||'0.0.1';
  conf.author = obj.author||'';
  conf.license = obj.license||'MIT';
  conf.description = obj.desc||'';
  conf.main = name;
  conf.keywords = [];
  conf.dependencies = {};
  conf.development = {};
  conf.guid = obj.guid||'xxxxxxx-xxxxxx-xxxxxx';
  conf.minsdk = obj.minsdk||'2.0.0';
  //Create version dir
  dir += '/'+conf.version;

  // dir
  console.log();
  utils.log('create', dir);
  mkdir(dir);

  conf.scripts = [name+".js"];
  write(join(dir, name+'.js'), '');

  // makefile
  //write(join(dir, 'Makefile'), createMakefile(obj));

  // readme
  write(join(dir, 'Readme.md'), readme(conf));

  // .gitignore
  write(join(dir, '.gitignore'), 'manifest\nbuild\nmodules\n');

  // write package.json
  write(join(dir, 'package.json'), JSON.stringify(conf, null, 2));

  console.log();
  process.exit();
});

/**
 * Boolean from `str`.
 */

function bool(str) {
  return 'yes' == str
    || 'y' == str;
}

/**
 * Create a makefile.
 */

function createMakefile(obj) {
  var buf = '\n';

  // build target
  buf += 'build: module';
  buf += name+'.js';
  buf += '\n\t@module build --dev\n\n';

  // template.js target
  if (bool(obj.html)) {
    buf += 'template.js: template.html\n';
    buf += '\t@module convert $<\n\n';
  }

  // components target
  buf += 'module: package.json\n';
  buf += '\t@module install --dev\n\n';

  // clean phony
  buf += 'clean:\n';
  buf += '\trm -fr build module template.js\n\n';

  // PHONY
  buf += '.PHONY: clean\n';

  return buf;
}
